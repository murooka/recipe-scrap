generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid()) @db.Uuid
  userAuthGoogle UserAuthGoogle?
  sessions       Session[]
  recipes        Recipe[]
}

model UserAuthGoogle {
  id        String   @id
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  token     String   @id
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model Recipe {
  id            String               @id @default(uuid()) @db.Uuid
  userId        String               @db.Uuid
  user          User                 @relation(fields: [userId], references: [id])
  name          String
  thumbnailUrl  String?
  ingredients   Ingredient[]
  steps         String[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  deletedAt     DateTime?
  sourceImage   RecipeSourceImage?
  sourceYoutube RecipeSourceYoutube?
  recipeJobs    RecipeJob[]
}

model Ingredient {
  recipeId  String   @db.Uuid
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  name      String
  amount    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([recipeId, name])
}

model RecipeSourceImage {
  id        String   @id @default(uuid()) @db.Uuid
  recipeId  String   @unique @db.Uuid
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecipeSourceYoutube {
  id        String   @id @default(uuid()) @db.Uuid
  recipeId  String   @unique @db.Uuid
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecipeJob {
  id        String              @id @default(uuid()) @db.Uuid
  recipeId  String              @db.Uuid
  recipe    Recipe              @relation(fields: [recipeId], references: [id])
  context   String
  createdAt DateTime            @default(now())
  completed RecipeJobCompleted?
  failed    RecipeJobFailed?
}

model RecipeJobCompleted {
  id          String    @id @default(uuid()) @db.Uuid
  recipeJobId String    @unique @db.Uuid
  recipeJob   RecipeJob @relation(fields: [recipeJobId], references: [id])
  createdAt   DateTime  @default(now())
}

model RecipeJobFailed {
  id          String    @id @default(uuid()) @db.Uuid
  recipeJobId String    @unique @db.Uuid
  recipeJob   RecipeJob @relation(fields: [recipeJobId], references: [id])
  reason      String
  createdAt   DateTime  @default(now())
}
